name: Release to PyPI

# Security: Explicit permissions for all jobs
permissions:
  contents: read

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.2.3

  # Manual trigger for emergency releases
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
      emergency:
        description: 'Emergency release (bypasses some checks)'
        required: false
        default: false
        type: boolean

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Format check
        run: |
          uv run ruff format --check .

      - name: Lint check
        run: |
          uv run ruff check .

      - name: Generate and verify stub files
        run: |
          echo "Generating stub files for quality check..."
          uv run stubgen -p opusgenie_di -o stub_check --include-private --include-docstrings
          echo "Comparing with existing stub files..."
          # Check if generated stubs are significantly different from existing ones
          if [ -d "stub_check/opusgenie_di" ]; then
            echo "✅ Stub generation successful"
            rm -rf stub_check
          else
            echo "❌ Stub generation failed"
            exit 1
          fi

      - name: Type check
        run: |
          uv run mypy opusgenie_di/

      - name: Test examples
        run: |
          uv run python examples/basic_usage.py
          uv run python examples/multi_context.py

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install build dependencies
        run: |
          uv add --dev build twine mypy

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted version: $VERSION"
          else
            echo "version=0.0.0-dev" >> $GITHUB_OUTPUT
            echo "Using dev version for manual trigger"
          fi

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ steps.version.outputs.version }}
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "Updated version to: $VERSION"

      - name: Generate stub files
        run: |
          echo "Generating stub files with stubgen..."
          echo "This ensures the published package has complete and up-to-date type stubs"
          uv run stubgen -p opusgenie_di -o stub_temp --include-private --include-docstrings --verbose
          echo "Copying generated stub files to package..."
          cp -r stub_temp/opusgenie_di/* opusgenie_di/
          rm -rf stub_temp
          echo "✅ Stub files generated and updated"

      - name: Verify stub files
        run: |
          echo "Verifying stub files are present..."
          find opusgenie_di -name "*.pyi" | head -10
          echo "Ensuring py.typed marker file exists..."
          if [ ! -f "opusgenie_di/py.typed" ]; then
            echo "Creating py.typed marker file..."
            touch opusgenie_di/py.typed
          fi
          echo "Running type check with updated stubs..."
          uv run mypy opusgenie_di/ --no-error-summary
          echo "✅ Stub files verified"

      - name: Check for stub file changes
        run: |
          echo "Checking if stub files were updated..."
          if git diff --quiet; then
            echo "No changes to stub files"
          else
            echo "Stub files were updated:"
            git diff --name-only | grep "\.pyi$" || echo "No .pyi files changed"
            echo "Changes will be included in the build"
          fi

      - name: Build package
        run: |
          uv run python -m build

      - name: Check build
        run: |
          uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test-pypi:
    name: Deploy to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://test.pypi.org/project/opusgenie-di/
    permissions:
      contents: read
      id-token: write  # Required for trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Test installation from TestPyPI
        run: |
          sleep 60  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ \
                      --extra-index-url https://pypi.org/simple/ \
                      opusgenie-di==${{ needs.build.outputs.version }}
          python -c "import opusgenie_di; print('✅ Package installed successfully from TestPyPI')"

  pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (startsWith(github.ref, 'refs/tags/v') && github.event_name != 'workflow_dispatch') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
    environment:
      name: pypi
      url: https://pypi.org/project/opusgenie-di/
    permissions:
      contents: read
      id-token: write  # Required for trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, pypi]
    if: |
      (startsWith(github.ref, 'refs/tags/v') && github.event_name != 'workflow_dispatch') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
    permissions:
      contents: write  # Required to create releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION=${{ needs.build.outputs.version }}
          echo "Extracting changelog for version $VERSION"
          
          # Extract the changelog section for this version
          awk -v version="$VERSION" '
            /^## \[/ {
              if ($0 ~ "\\[" version "\\]") {
                found = 1
                next
              } else if (found) {
                exit
              }
            }
            found && /^## \[/ { exit }
            found { print }
          ' CHANGELOG.md > release_notes.md
          
          if [ ! -s release_notes.md ]; then
            echo "No specific changelog found for version $VERSION, using latest entry"
            awk '/^## \[/{if(NR>1) exit; found=1; next} found' CHANGELOG.md > release_notes.md
          fi
          
          echo "Release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false